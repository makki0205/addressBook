/* -------------------------------------------------------------------------- */
/* sort_f.cpp																  */
/*																			  */
/*																			  */
/* -------------------------------------------------------------------------- */
/* 番号		更新履歴							  日付		氏名			*/
/* -------------------------------------------------------------------------- */
/* 000		新規作成								2015/10/20	葛巻 大樹	  */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/* includeファイル															  */
/* -------------------------------------------------------------------------- */
#include "define.h"
/* -------------------------------------------------------------------------- */
/* 定数定義																	  */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/* グローバル変数															   */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/* プロトタイプ宣言(private)												  */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/* 関数名		: sortdata													   */
/* 機能名		: データのソート											    */
/* 機能概要	   : データをカナ順でソートする								     */
/* 戻り値		: SINT			   : OK				: 正常終了				   */
/*             : SINT			  : ERR            : 異常終了				  */
/* 作成日		: 葛巻大樹							2016/02/23				   */
/* -------------------------------------------------------------------------- */
int sortdata ( void )
{
    SINT check      = 0;
    SINT sort_order = 0;
    cls( );
    printf( "---アドレス帳並び替え---\n" );
    menu_print( "昇順でソート" );
    menu_print( "降順でソート" );
    sort_order = select( 2 );
    check      = sort( sort_order );
    if( check == ERR ) {
        return ERR;
    }
    ( sort_order == 0 ) ? printf( "昇順でソートしました\n" ) : printf( "降順でソートしました\n" );
}

/* -------------------------------------------------------------------------- */
/* 関数名		: sort														   */
/* 機能名		: ソートを実行する											   */
/* 機能概要	   : カナ順でソートを実行する									  */
/* 引数		 : SINT				: sort_order	 : 0なら昇順1なら降順		*/
/* 戻り値		: SINT			   : OK				: 正常終了				   */
/*             : SINT			  : ERR            : 異常終了				  */
/* 作成日		: 葛巻大樹							2016/02/23				   */
/* -------------------------------------------------------------------------- */
int sort ( SINT sort_order )
{
    SINT          index     = 0;
    SINT          baseindex = 0;
    SINT          check     = 0;
    SINT          datamax   = 0;
    SINT          subscript = 0;
    struct BOOK   data[10];
    struct BOOK   temp;
    struct STATUS sta;
    memset( &data[0], 0, sizeof( data ) );
    memset( &temp, 0, sizeof( temp ) );
    memset( &sta, 0, sizeof( sta ) );
    check = statusread( &sta );
    if( check == ERR ) {
        return ERR;
    }
    for( index = 0 ; index < 10 ; index++ ) {
        if( sta.flg[index] == 1 ) {
            datamax++;
            bookread( &data[index], index );
        }
    }
    for( baseindex = 0 ; baseindex < datamax ; baseindex++ ) {
        subscript = baseindex;
        for( index = baseindex + 1 ; index < 10 ; index++ ) {
            /* 空データなら見ない-------------------------------------------- */
            if( data[index].kana[0] == '\0' ) {
                continue;
            }
            check = strcmp( data[subscript].kana, data[index].kana );
            /* 降順なら反転-------------------------------------------------- */
            if( sort_order == 1 ) {
                check *= -1;
            }
            if(( check > 0 ) || data[subscript].kana[0] == '\0' ) {
                subscript = index;
            }
        }
        temp            = data[subscript];
        data[subscript] = data[baseindex];
        data[baseindex] = temp;
    }
    for( index = 0 ; index < datamax ; index++ ) {
        bookwrite( &data[index], index );
    }
    for( index = 0 ; index < 10 ; index++ ) {
        if( index < datamax ) {
            sta.flg[index] = 1;
        } else {
            sta.flg[index] = 0;
        }
    }
    statuswrite( &sta );

    return OK;
}

/* -------------------------------------------------------------------------- */
/*              Copyright HAL College of Technology & Design				  */
/* -------------------------------------------------------------------------- */
